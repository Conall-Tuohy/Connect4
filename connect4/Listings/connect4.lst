


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CS1022 Introduction to Computing II 2018/2019
    3 00000000         ; Mid-Term Assignment - Connect 4 - SOLUTION
    4 00000000         ;
    5 00000000         ; get, put and puts subroutines provided by jones@scss.t
                       cd.ie
    6 00000000         ;
    7 00000000 00000006 
                       ROWNUM  EQU              6
    8 00000000 00000007 
                       COLUMNNUM
                               EQU              7
    9 00000000         
   10 00000000         
   11 00000000 E002C000 
                       PINSEL0 EQU              0xE002C000
   12 00000000 E000C000 
                       U0RBR   EQU              0xE000C000
   13 00000000 E000C000 
                       U0THR   EQU              0xE000C000
   14 00000000 E000C00C 
                       U0LCR   EQU              0xE000C00C
   15 00000000 E000C014 
                       U0LSR   EQU              0xE000C014
   16 00000000         
   17 00000000         
   18 00000000                 AREA             globals, DATA, READWRITE
   19 00000000         
   20 00000000                 AREA             RESET, CODE, READONLY
   21 00000000                 ENTRY
   22 00000000         RESTART
   23 00000000         ; initialise SP to top of RAM
   24 00000000         
   25 00000000         
   26 00000000         
   27 00000000 E59FDA7C        LDR              R13, =0x40001000 ; initialse SP
                                                            
   28 00000004         
   29 00000004         ; initialise the console
   30 00000004 EB00027D        BL               inithw
   31 00000008         
   32 00000008         ;
   33 00000008         ; your program goes here
   34 00000008         ;
   35 00000008 EB0001C5        BL               INITBOARD
   36 0000000C E59F0A74        LDR              R0, =str_go ; R0 -> "Allocated 
                                                            String"
   37 00000010 EB000272        BL               PUTS        ; put string
   38 00000014 E59F0A70        LDR              R0, =ROBOTCHOICE ; R0 -> "Alloc
                                                            ated String"
   39 00000018 EB000270        BL               PUTS        ; put string
   40 0000001C         INPUTCHOICEAGAIN
   41 0000001C E59F1A6C        LDR              R1, =0x40000200
   42 00000020 E3A02002        LDR              R2, =2
   43 00000024 EB0001AC        BL               GETS
   44 00000028 E3530052        CMP              R3,#0x52
   45 0000002C 0A000004        BEQ              ROBOTSETUP
   46 00000030 E3530050        CMP              R3,#0x50
   47 00000034 0A000007        BEQ              NORMALMODE



ARM Macro Assembler    Page 2 


   48 00000038 E59F0A54        LDR              R0, =INVALIDSTARTINGCHOICE ; R0
                                                             -> "Allocated Stri
                                                            ng"
   49 0000003C EB000267        BL               PUTS        ; put string
   50 00000040 EAFFFFF5        B                INPUTCHOICEAGAIN
   51 00000044         
   52 00000044         ROBOTSETUP
   53 00000044 E3A05001        LDR              R5,=1
   54 00000048 E59F0A38        LDR              R0, =str_go ; R0 -> "Allocated 
                                                            String"
   55 0000004C EB000263        BL               PUTS        ; put string
   56 00000050 EB00023C        BL               PRINTBOARD
   57 00000054 EA000009        B                PLAYERONESTURN
   58 00000058         
   59 00000058         NORMALMODE
   60 00000058 E3A05002        LDR              R5,=2
   61 0000005C E59F0A24        LDR              R0, =str_go ; R0 -> "Allocated 
                                                            String"
   62 00000060 EB00025E        BL               PUTS        ; put string
   63 00000064 EB000237        BL               PRINTBOARD
   64 00000068 EA000004        B                PLAYERONESTURN
   65 0000006C         
   66 0000006C         
   67 0000006C         NOSPACEFOUND
   68 0000006C E59F0A24        LDR              R0, =str_newline ; R0 -> "Alloc
                                                            ated String"
   69 00000070 EB00025A        BL               PUTS        ; put string
   70 00000074 E59F0A20        LDR              R0, =FULLCOLUMN ; R0 -> "Alloca
                                                            ted String"
   71 00000078 EB000258        BL               PUTS        ; put string
   72 0000007C EA000014        B                BACKTOINPUT
   73 00000080         
   74 00000080         PLAYERONESTURN
   75 00000080 EB000247        BL               isBoardFull
   76 00000084 E3A08059        LDR              R8,=0x59
   77 00000088 E59F0A10        LDR              R0, =PLAYERONESGO ; R0 -> "Allo
                                                            cated String"
   78 0000008C EB000253        BL               PUTS        ; put string
   79 00000090 E59F0A0C        LDR              R0, =ASKFORINPUT ; R0 -> "Alloc
                                                            ated String"
   80 00000094 EB000251        BL               PUTS        ; put string
   81 00000098 EA00000D        B                BACKTOINPUT
   82 0000009C         
   83 0000009C         PLAYERTWOSTURN
   84 0000009C EB000240        BL               isBoardFull
   85 000000A0 E3A08058        LDR              R8,=0x58
   86 000000A4 E59F09FC        LDR              R0, =PLAYERTWOSGO ; R0 -> "Allo
                                                            cated String"
   87 000000A8 EB00024C        BL               PUTS        ; put string
   88 000000AC E59F09F0        LDR              R0, =ASKFORINPUT ; R0 -> "Alloc
                                                            ated String"
   89 000000B0 EB00024A        BL               PUTS        ; put string
   90 000000B4 EA000006        B                BACKTOINPUT
   91 000000B8         
   92 000000B8         ROBOTSTURN
   93 000000B8 EB000239        BL               isBoardFull
   94 000000BC E3A08052        LDR              R8,=0x52
   95 000000C0 E59F09E4        LDR              R0, =ROBOTSGO ; R0 -> "Allocate
                                                            d String"



ARM Macro Assembler    Page 3 


   96 000000C4 EB000245        BL               PUTS        ; put string
   97 000000C8 EB0000E1        BL               robotColumnChecker
   98 000000CC EB00021D        BL               PRINTBOARD
   99 000000D0 EAFFFFEA        B                PLAYERONESTURN
  100 000000D4         
  101 000000D4         BACKTOINPUT
  102 000000D4         
  103 000000D4 E59F19B4        LDR              R1, =0x40000200
  104 000000D8 E3A02002        LDR              R2, =2
  105 000000DC EB00017E        BL               GETS
  106 000000E0         
  107 000000E0 E3530052        CMP              R3, #0x52
  108 000000E4 0AFFFFC5        BEQ              RESTART
  109 000000E8 E3530037        CMP              R3, #0x37
  110 000000EC 8A000024        BHI              INPUTNOTVALID
  111 000000F0 E3530031        CMP              R3, #0x31
  112 000000F4 3A000022        BLO              INPUTNOTVALID
  113 000000F8 EB000195        BL               PLACE
  114 000000FC E59F0994        LDR              R0, =str_newline ; R0 -> "Alloc
                                                            ated String"
  115 00000100 EB000236        BL               PUTS        ; put string
  116 00000104 EB00020F        BL               PRINTBOARD
  117 00000108 E3580058        CMP              R8, #0x58
  118 0000010C 0AFFFFDB        BEQ              PLAYERONESTURN
  119 00000110 E3580052        CMP              R8, #0x52
  120 00000114 0AFFFFD9        BEQ              PLAYERONESTURN
  121 00000118 EAFFFFFF        B                ROBOTORNOT
  122 0000011C         
  123 0000011C         ROBOTORNOT
  124 0000011C E3550001        CMP              R5, #1
  125 00000120 0AFFFFE4        BEQ              ROBOTSTURN
  126 00000124 E3550002        CMP              R5, #2
  127 00000128 0AFFFFDB        BEQ              PLAYERTWOSTURN
  128 0000012C         
  129 0000012C         GAMEWON
  130 0000012C E3580052        CMP              R8, #0x52
  131 00000130 0A000009        BEQ              ROBOTWIN
  132 00000134         BACKTOGAMEWON
  133 00000134 E59F095C        LDR              R0, =str_newline ; R0 -> "Alloc
                                                            ated String"
  134 00000138 EB000228        BL               PUTS        ; put string
  135 0000013C EB000201        BL               PRINTBOARD
  136 00000140 E59F0950        LDR              R0, =str_newline ; R0 -> "Alloc
                                                            ated String"
  137 00000144 EB000225        BL               PUTS        ; put string
  138 00000148 E1A00008        MOV              R0, R8
  139 0000014C EB000239        BL               put
  140 00000150 E59F0958        LDR              R0, =win    ; R0 -> "Allocated 
                                                            String"
  141 00000154 EB000221        BL               PUTS        ; put string
  142 00000158 EA00000E        B                stop
  143 0000015C         
  144 0000015C         ROBOTWIN
  145 0000015C E5848000        STR              R8, [R4]    ; Makes the last mo
                                                            ve for the robot as
                                                             it tries to end th
                                                            e game 
  146 00000160 EAFFFFF3        B                BACKTOGAMEWON ; when it finds a
                                                             winning place but 



ARM Macro Assembler    Page 4 


                                                            doesn't place it.
  147 00000164         
  148 00000164         GAMEISDRAWED
  149 00000164 E59F092C        LDR              R0, =str_newline ; R0 -> "Alloc
                                                            ated String"
  150 00000168 EB00021C        BL               PUTS        ; put string
  151 0000016C EB0001F5        BL               PRINTBOARD
  152 00000170 E59F0920        LDR              R0, =str_newline ; R0 -> "Alloc
                                                            ated String"
  153 00000174 EB000219        BL               PUTS        ; put string
  154 00000178 E59F0934        LDR              R0, =DRAW   ; R0 -> "Allocated 
                                                            String"
  155 0000017C EB000217        BL               PUTS        ; put string
  156 00000180 EA000004        B                stop
  157 00000184         
  158 00000184         INPUTNOTVALID
  159 00000184 E59F090C        LDR              R0, =str_newline ; R0 -> "Alloc
                                                            ated String"
  160 00000188 EB000214        BL               PUTS        ; put string
  161 0000018C E59F0924        LDR              R0, =INVALIDINPUT ; R0 -> "Allo
                                                            cated String"
  162 00000190 EB000212        BL               PUTS        ; put strinG
  163 00000194         
  164 00000194 EAFFFFCE        B                BACKTOINPUT
  165 00000198         
  166 00000198         
  167 00000198         
  168 00000198         
  169 00000198 EAFFFFFE 
                       stop    B                stop
  170 0000019C         
  171 0000019C         
  172 0000019C         ;
  173 0000019C         ; hint! put the strings used by your program here ...
  174 0000019C         ;
  175 0000019C         
  176 0000019C         
  177 0000019C 54 68 61 
              74 20 64 
              69 64 6E 
              27 74 20 
              73 65 65 
              6D 20 74 
              6F 20 62 
              65 20 61 
              20 76 61 
              6C 69 64 
              20 63 68 
              6F 69 63 
              65 2E 2E 
              20 49 66 
              20 79 6F 
              75 20 63 
              6F 75 6C 
              64 20 65 
              69 74 68 
              65 72 20 
              74 79 70 
              65 20 27 



ARM Macro Assembler    Page 5 


              52 27 20 
              6F 72 20 
              27 50 27 
              20 70 6C 
              65 61 73 
              65 2E 0A 
              00 00    INVALIDSTARTINGCHOICE
                               DCB              "That didn't seem to be a valid
 choice.. If you could either type 'R' or 'P' please.", 0x0a, 0, 0
  178 000001F2 57 6F 75 
              6C 64 20 
              79 6F 75 
              20 6C 69 
              6B 65 20 
              74 6F 20 
              70 6C 61 
              79 20 61 
              67 61 69 
              6E 73 74 
              20 61 20 
              72 6F 62 
              6F 74 20 
              28 74 79 
              70 65 20 
              52 29 20 
              6F 72 20 
              61 6E 6F 
              74 68 65 
              72 20 70 
              6C 61 79 
              65 72 20 
              28 74 79 
              70 65 20 
              50 29 0A 
              00 00    ROBOTCHOICE
                               DCB              "Would you like to play against
 a robot (type R) or another player (type P)", 0x0a, 0, 0
  179 0000023F 54 68 65 
              20 67 61 
              6D 65 20 
              65 6E 64 
              65 64 20 
              69 6E 20 
              61 20 64 
              72 61 77 
              20 77 69 
              74 68 20 
              6E 65 69 
              74 68 65 
              72 20 70 
              6C 61 79 
              65 72 20 
              77 69 6E 
              6E 69 6E 
              67 2E 20 
              47 6F 6F 
              64 20 6A 
              6F 62 20 
              49 20 67 



ARM Macro Assembler    Page 6 


              75 65 73 
              73 2E 0A 
              00 00    DRAW    DCB              "The game ended in a draw with 
neither player winning. Good job I guess.", 0x0a, 0, 0
  180 00000289 49 6E 70 
              75 74 20 
              61 20 63 
              6F 6C 75 
              6D 6E 20 
              62 65 74 
              77 65 65 
              6E 20 31 
              20 61 6E 
              64 20 37 
              20 28 6F 
              72 20 74 
              79 70 65 
              20 52 20 
              74 6F 20 
              72 65 73 
              74 61 72 
              74 2E 29 
              0A 00 00 ASKFORINPUT
                               DCB              "Input a column between 1 and 7
 (or type R to restart.)", 0x0a, 0, 0
  181 000002C2 54 68 61 
              74 20 63 
              6F 6C 75 
              6D 6E 20 
              69 73 20 
              66 75 6C 
              6C 2E 20 
              49 6E 70 
              75 74 20 
              61 20 64 
              69 66 66 
              65 72 61 
              6E 74 20 
              63 6F 6C 
              75 6D 6E 
              20 62 65 
              74 77 65 
              65 6E 20 
              31 20 61 
              6E 64 20 
              37 2E 0A 
              00 00    FULLCOLUMN
                               DCB              "That column is full. Input a d
ifferant column between 1 and 7.", 0x0a, 0, 0
  182 00000303 20 57 49 
              4E 53 0A 
              00 00    win     DCB              " WINS", 0x0a, 0, 0
  183 0000030B 49 74 27 
              73 20 50 
              6C 61 79 
              65 72 20 
              31 27 73 
              20 74 75 
              72 6E 2E 



ARM Macro Assembler    Page 7 


              0A 00 00 PLAYERONESGO
                               DCB              "It's Player 1's turn.", 0x0a, 
0, 0
  184 00000323 49 74 27 
              73 20 50 
              6C 61 79 
              65 72 20 
              32 27 73 
              20 74 75 
              72 6E 2E 
              0A 00 00 PLAYERTWOSGO
                               DCB              "It's Player 2's turn.", 0x0a, 
0, 0
  185 0000033B 49 74 27 
              73 20 74 
              68 65 20 
              72 6F 62 
              6F 74 73 
              20 74 75 
              72 6E 2E 
              0A 00 00 ROBOTSGO
                               DCB              "It's the robots turn.", 0x0a, 
0, 0
  186 00000353 54 68 61 
              74 20 69 
              6E 70 75 
              74 20 64 
              69 64 6E 
              27 74 20 
              73 65 65 
              6D 20 74 
              6F 20 62 
              65 20 61 
              20 76 61 
              6C 69 64 
              20 6F 6E 
              65 20 28 
              42 45 54 
              57 45 45 
              4E 20 31 
              20 26 20 
              37 29 2E 
              0A 00 00 INVALIDINPUT
                               DCB              "That input didn't seem to be a
 valid one (BETWEEN 1 & 7).", 0x0a, 0, 0
  187 0000038F 4C 65 74 
              27 73 20 
              70 6C 61 
              79 20 43 
              6F 6E 6E 
              65 63 74 
              34 21 21 
              0A 0D 0A 
              0D 00    str_go  DCB              "Let's play Connect4!!",0xA, 0x
D, 0xA, 0xD, 0
  188 000003A9 0A 0D 00 
                       str_newline
                               DCB              0xA, 0xD, 0x0
  189 000003AC         



ARM Macro Assembler    Page 8 


  190 000003AC         
  191 000003AC 0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F BOARD   DCD              79,79,79,79,79,79,79
  192 000003C8 0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F         DCD              79,79,79,79,79,79,79
  193 000003E4 0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F         DCD              79,79,79,79,79,79,79
  194 00000400 0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F         DCD              79,79,79,79,79,79,79
  195 0000041C 0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F         DCD              79,79,79,79,79,79,79
  196 00000438 0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F 
              0000004F         DCD              79,79,79,79,79,79,79
  197 00000454         
  198 00000454         
  199 00000454         
  200 00000454         ;
  201 00000454         ; your subroutines go here
  202 00000454         ;
  203 00000454         
  204 00000454         ;
  205 00000454         ; robotColumnChecker subroutine
  206 00000454         ; Checks what column is the best move
  207 00000454         ; parameters:
  208 00000454         ; none
  209 00000454         ; return value:
  210 00000454         ; none
  211 00000454         ;
  212 00000454         robotColumnChecker



ARM Macro Assembler    Page 9 


  213 00000454 E92D4FFE        PUSH             {R1-R11, LR}
  214 00000458 E1A0A00E        MOV              R10, LR
  215 0000045C E3A02101        LDR              R2,=0x40000000
  216 00000460 E3A00007        LDR              R0,=COLUMNNUM
  217 00000464 E3A01006        LDR              R1,=ROWNUM
  218 00000468 E0010190        MUL              R1, R0, R1
  219 0000046C E3A00004        LDR              R0,=4
  220 00000470 E0010190        MUL              R1, R0, R1
  221 00000474 E0822001        ADD              R2, R1      ;R2 = End of Board 
                                                            (Row Check)
  222 00000478 E2422004        SUB              R2, #4
  223 0000047C E1A05002        MOV              R5, R2      ;copy of end of boa
                                                            rd
  224 00000480 E3A06007        LDR              R6,=COLUMNNUM ;
  225 00000484 E0060690        MUL              R6, R0, R6  ;R6 x 4
  226 00000488 E0455006        SUB              R5, R6      ;R5 = Start of bott
                                                            om row
  227 0000048C E3A06000        LDR              R6,=0       ;R6=MAX PLACE NUMBE
                                                            R 
  228 00000490 E3A0B000        LDR              R11,=0x0    ; R11= Best address
                                                            
  229 00000494         nextrowcheck
  230 00000494 E1520005        CMP              R2, R5
  231 00000498 9A00000A        BLS              ENDOFCOLUMNCHECKER
  232 0000049C E1A04002        MOV              R4, R2      ;Column Check
  233 000004A0 E1A0700E        MOV              R7, LR
  234 000004A4 EB00001F        BL               FIND_FREE_SLOT
  235 000004A8         
  236 000004A8         
  237 000004A8         FOUNDEMPTYSLOT
  238 000004A8 E1A0E007        MOV              LR, R7
  239 000004AC EB000024        BL               CHECKROBOSPOTVALUE
  240 000004B0 E1570006        CMP              R7, R6      ; IS CURRENTS ROW P
                                                            OTENTIAL BETTER THA
                                                            N ANY CHECKED BEFOR
                                                            E
  241 000004B4 9A000001        BLS              ROWISFULL   ; IF NOT (CHECK NEX
                                                            T ROW)
  242 000004B8 E1A0B009        MOV              R11, R9     ; IF IS ()
  243 000004BC E1A06007        MOV              R6, R7
  244 000004C0         ROWISFULL
  245 000004C0 E2422004        SUB              R2, #4      ;R2 go left a colum
                                                            n
  246 000004C4 EAFFFFF2        B                nextrowcheck
  247 000004C8         ENDOFCOLUMNCHECKER
  248 000004C8 E1A0E007        MOV              LR, R7
  249 000004CC         
  250 000004CC         ;BL ROBOTPLAYERWINCHECKER
  251 000004CC E58B8000        STR              R8, [R11]
  252 000004D0 E1A0E00A        MOV              LR, R10
  253 000004D4 E8BD8FFE        POP              {R1-R11, PC}
  254 000004D8         
  255 000004D8         ;
  256 000004D8         ; ROBOTPLAYERWINCHECKER subroutine
  257 000004D8         ; Checks what column is the best move
  258 000004D8         ; parameters:
  259 000004D8         ; R2 = END OF ARRAY 
  260 000004D8         ; return value:
  261 000004D8         ; R11 = WINNING MOVE FOR PLAYER



ARM Macro Assembler    Page 10 


  262 000004D8         ;
  263 000004D8         
  264 000004D8         ROBOTPLAYERWINCHECKER
  265 000004D8 E92D43FC        PUSH{r2-R9,      LR}
  266 000004DC E1A0500E        MOV              R5, LR
  267 000004E0 E3A04101        LDR              R4,=0x40000000
  268 000004E4 E3A08059        LDR              R8,=0x59
  269 000004E8         NEXTTILE
  270 000004E8 E3A00007        LDR              R0,=7
  271 000004EC E3A07007        LDR              R7,=7
  272 000004F0 E5943000        LDR              R3,[R4]
  273 000004F4 E353004F        CMP              R3, #79
  274 000004F8 1A000005        BNE              SKIPTILE
  275 000004FC E3A0A052        LDR              R10,=0x52
  276 00000500 EB0000B0        BL               checkIfWon
  277 00000504 E35C0001        CMP              R12, #1
  278 00000508 0A000003        BEQ              PLAYERWINFOUND
  279 0000050C E1540002        CMP              R4, R2
  280 00000510 2A000002        BHS              NOHUMANWINFOUND
  281 00000514         SKIPTILE
  282 00000514 E2844004        ADD              R4, #4
  283 00000518 EAFFFFF2        B                NEXTTILE
  284 0000051C         PLAYERWINFOUND
  285 0000051C E1A0B00A        MOV              R11, R10
  286 00000520         NOHUMANWINFOUND
  287 00000520 E1A0E005        MOV              LR, R5
  288 00000524 E8BD83FC        POP{r2-R9,       PC}
  289 00000528         
  290 00000528         ;
  291 00000528         ; FIND_FREE_SLOT
  292 00000528         ; Finds an empty slot in a row or says that the row is f
                       ull
  293 00000528         
  294 00000528         FIND_FREE_SLOT
  295 00000528         ROWCHECKLOOP
  296 00000528 E3540101        CMP              R4, #0x40000000
  297 0000052C 3AFFFFE3        BLO              ROWISFULL
  298 00000530 E5943000        LDR              R3, [R4]
  299 00000534 E353004F        CMP              R3, #79
  300 00000538 0AFFFFDA        BEQ              FOUNDEMPTYSLOT
  301 0000053C E244401C        SUB              R4, #28
  302 00000540 EAFFFFF8        B                ROWCHECKLOOP
  303 00000544         
  304 00000544         ;
  305 00000544         ; CHECKSPOTVALUE subroutine
  306 00000544         ; returns the POTENTIAL VALUE OF A SPOT
  307 00000544         ; parameters:
  308 00000544         ; R4 = SPOT IN QUESTION
  309 00000544         ; R8 = ROBOT COUNTER
  310 00000544         ; return value:
  311 00000544         ; R7 - Amount of move
  312 00000544         ;
  313 00000544         
  314 00000544         CHECKROBOSPOTVALUE
  315 00000544 E92D41FF        PUSH{r0-r8,      lr}
  316 00000548 E3A07000        LDR              R7,=0       ;Place Value
  317 0000054C         
  318 0000054C         ;horizontal checker
  319 0000054C E3A01001        LDR              R1,=1       ;Winning Counter



ARM Macro Assembler    Page 11 


  320 00000550 E1A03004        MOV              R3, R4      ;R3 = TempEditable 
                                                            address 
  321 00000554         ;moving right
  322 00000554         cRUNRIGHTAGAIN
  323 00000554 EB00005A        BL               SET_NEW_SPOTSCORE
  324 00000558 E3510004        CMP              R1,#4
  325 0000055C 2AFFFEF2        BHS              GAMEWON
  326 00000560         
  327 00000560 E2833004        ADD              R3,#4
  328 00000564 E5935000        LDR              R5, [R3]
  329 00000568 E3550052        CMP              R5, #0x52
  330 0000056C 1A000001        BNE              cENDOFRIGHT
  331 00000570 E2811001        ADD              R1,#1
  332 00000574 EAFFFFF6        B                cRUNRIGHTAGAIN
  333 00000578         cENDOFRIGHT
  334 00000578         ;moving LEFT
  335 00000578 E1A03004        MOV              R3, R4
  336 0000057C         cRUNLEFTAGAIN
  337 0000057C EB000050        BL               SET_NEW_SPOTSCORE
  338 00000580 E3510004        CMP              R1,#4
  339 00000584 2AFFFEE8        BHS              GAMEWON
  340 00000588         
  341 00000588 E2433004        SUB              R3,#4
  342 0000058C E5935000        LDR              R5, [R3]
  343 00000590 E3550052        CMP              R5, #0x52
  344 00000594 1A000001        BNE              cENDOFLEFT
  345 00000598 E2811001        ADD              R1,#1
  346 0000059C EAFFFFF6        B                cRUNLEFTAGAIN
  347 000005A0         cENDOFLEFT
  348 000005A0         
  349 000005A0         
  350 000005A0         ;VERTICAL checker
  351 000005A0 E3A01001        LDR              R1,=1
  352 000005A4 E59F3534        LDR              R3,=0x400000A4
  353 000005A8 E1A06004        MOV              R6, R4
  354 000005AC         cGODOWNAGAIN
  355 000005AC EB000044        BL               SET_NEW_SPOTSCORE
  356 000005B0 E3510004        CMP              R1,#4
  357 000005B4 2AFFFEDC        BHS              GAMEWON
  358 000005B8 E286601C        ADD              R6,#28
  359 000005BC E1560003        CMP              R6, R3
  360 000005C0 AA000004        BGE              cENDOFDOWN
  361 000005C4 E5965000        LDR              R5, [R6]
  362 000005C8 E3550052        CMP              R5, #0x52
  363 000005CC 1A000001        BNE              cENDOFDOWN
  364 000005D0 E2811001        ADD              R1,#1
  365 000005D4 EAFFFFF4        B                cGODOWNAGAIN
  366 000005D8         cENDOFDOWN
  367 000005D8         
  368 000005D8         
  369 000005D8         ;DIAGONAL CHECKER
  370 000005D8         
  371 000005D8         
  372 000005D8         ;DIAGONAL UP-RIGHT
  373 000005D8 E3A01001        LDR              R1,=1
  374 000005DC E3A03101        LDR              R3,=0x40000000
  375 000005E0 E1A06004        MOV              R6, R4
  376 000005E4         cGO_UP_RIGHT_AGAIN
  377 000005E4 EB000036        BL               SET_NEW_SPOTSCORE



ARM Macro Assembler    Page 12 


  378 000005E8 E3510004        CMP              R1,#4
  379 000005EC 2AFFFECE        BHS              GAMEWON
  380 000005F0 E246601C        SUB              R6,#28
  381 000005F4 E1560003        CMP              R6, R3
  382 000005F8 BA000005        BLT              cENDOF_UP_RIGHT
  383 000005FC E2866004        ADD              R6,#4
  384 00000600 E5965000        LDR              R5, [R6]
  385 00000604 E3550052        CMP              R5, #0x52
  386 00000608 1A000001        BNE              cENDOF_UP_RIGHT
  387 0000060C E2811001        ADD              R1,#1
  388 00000610 EAFFFFF3        B                cGO_UP_RIGHT_AGAIN
  389 00000614         cENDOF_UP_RIGHT
  390 00000614         
  391 00000614         
  392 00000614         ;DIAGONAL DOWN_LEFT
  393 00000614 E1A06004        MOV              R6, R4
  394 00000618 E59F34C0        LDR              R3,=0x400000A4
  395 0000061C         cGO_DOWN_LEFT_AGAIN
  396 0000061C EB000028        BL               SET_NEW_SPOTSCORE
  397 00000620 E3510004        CMP              R1,#4
  398 00000624 2AFFFEC0        BHS              GAMEWON
  399 00000628 E286601C        ADD              R6,#28
  400 0000062C E1560003        CMP              R6, R3
  401 00000630 CA000005        BGT              cENDOF_DOWN_LEFT
  402 00000634 E2466004        SUB              R6,#4
  403 00000638 E5965000        LDR              R5, [R6]
  404 0000063C E3550052        CMP              R5, #0x52
  405 00000640 1A000001        BNE              cENDOF_DOWN_LEFT
  406 00000644 E2811001        ADD              R1,#1
  407 00000648 EAFFFFF3        B                cGO_DOWN_LEFT_AGAIN
  408 0000064C         cENDOF_DOWN_LEFT
  409 0000064C         
  410 0000064C         
  411 0000064C         ;DIAGONAL UP-LEFT
  412 0000064C E3A01001        LDR              R1,=1
  413 00000650 E3A03101        LDR              R3,=0x40000000
  414 00000654 E1A06004        MOV              R6, R4
  415 00000658         cGO_UP_LEFT_AGAIN
  416 00000658 EB000019        BL               SET_NEW_SPOTSCORE
  417 0000065C E3510004        CMP              R1,#4
  418 00000660 2AFFFEB1        BHS              GAMEWON
  419 00000664 E246601C        SUB              R6,#28
  420 00000668 E1560003        CMP              R6, R3
  421 0000066C BA000005        BLT              cENDOF_UP_LEFT
  422 00000670 E2466004        SUB              R6,#4
  423 00000674 E5965000        LDR              R5, [R6]
  424 00000678 E3550052        CMP              R5, #0x52
  425 0000067C 1A000001        BNE              cENDOF_UP_LEFT
  426 00000680 E2811001        ADD              R1,#1
  427 00000684 EAFFFFF3        B                cGO_UP_LEFT_AGAIN
  428 00000688         cENDOF_UP_LEFT
  429 00000688         
  430 00000688         
  431 00000688         ;DIAGONAL DOWN_RIGHT
  432 00000688 E1A06004        MOV              R6, R4
  433 0000068C E59F344C        LDR              R3,=0x400000A4
  434 00000690         cGO_DOWN_RIGHT_AGAIN
  435 00000690 EB00000B        BL               SET_NEW_SPOTSCORE
  436 00000694 E3510004        CMP              R1,#4



ARM Macro Assembler    Page 13 


  437 00000698 2AFFFEA3        BHS              GAMEWON
  438 0000069C E286601C        ADD              R6,#28
  439 000006A0 E1560003        CMP              R6, R3
  440 000006A4 CA000005        BGT              cENDOF_DOWN_RIGHT
  441 000006A8 E2866004        ADD              R6,#4
  442 000006AC E5965000        LDR              R5, [R6]
  443 000006B0 E3550052        CMP              R5, #0x52
  444 000006B4 1A000001        BNE              cENDOF_DOWN_RIGHT
  445 000006B8 E2811001        ADD              R1,#1
  446 000006BC EAFFFFF3        B                cGO_DOWN_RIGHT_AGAIN
  447 000006C0         cENDOF_DOWN_RIGHT
  448 000006C0         
  449 000006C0 E8BD81FF        POP{r0-r8,       PC}
  450 000006C4         
  451 000006C4         SET_NEW_SPOTSCORE
  452 000006C4 E92D4800        PUSH             {R11, LR}
  453 000006C8 E1510007        CMP              R1, R7
  454 000006CC 9A000001        BLS              ISNTHIGHER
  455 000006D0 E1A07001        MOV              R7, R1
  456 000006D4 E1A09004        MOV              R9, R4
  457 000006D8         ISNTHIGHER
  458 000006D8 E8BD8800        POP              {R11, PC}
  459 000006DC         
  460 000006DC         
  461 000006DC         
  462 000006DC         ;
  463 000006DC         ; getS subroutine
  464 000006DC         ; returns the ASCII code of the next character read on t
                       he console
  465 000006DC         ; parameters:
  466 000006DC         ; R1 = ARRAYPOINTER TO CHAR[]
  467 000006DC         ; R2 = UNSIGNED INT LENGTH
  468 000006DC         ; return value:
  469 000006DC         ; R0 - ASCII code of the character read on teh console (
                       byte)
  470 000006DC         ;
  471 000006DC         GETS
  472 000006DC E92D4FF0        PUSH             {R4-R11, LR}
  473 000006E0 E1A08002        MOV              R8, R2
  474 000006E4 E1A09001        MOV              R9, R1
  475 000006E8 E1A0700E        MOV              R7, LR      ;
  476 000006EC E3A04000        LDR              R4, = 0     ; R4 = LENGTH_COUNT
                                                            ER
  477 000006F0 E2488001        SUB              R8, #1
  478 000006F4         LOOP1
  479 000006F4 E2844001        ADD              R4, #1      ;LENGTH_COUNTER++;
  480 000006F8 E1540002        CMP              R4, R2      ;LENGTH_COUNTER==LE
                                                            NGTH-1? 
  481 000006FC 0A000004        BEQ              GETSEND
  482 00000700         
  483 00000700 EB0000C5        BL               get
  484 00000704 E4C90001        STRB             R0, [R9], #1
  485 00000708 E1A0A000        MOV              R10, R0
  486 0000070C EB0000C9        BL               put
  487 00000710 EAFFFFF7        B                LOOP1
  488 00000714         GETSEND
  489 00000714 E4C90001        STRB             R0, [R9], #1
  490 00000718 E1A0300A        MOV              R3, R10
  491 0000071C E1A0E007        MOV              LR, R7      ;



ARM Macro Assembler    Page 14 


  492 00000720 E8BD8FF0        POP              {R4-R11, PC}
  493 00000724         
  494 00000724         ;
  495 00000724         ; INITBOARD subroutine
  496 00000724         ; Puts board to the memory
  497 00000724         ; parameters:
  498 00000724         ; none
  499 00000724         ; return value:
  500 00000724         ; none
  501 00000724         ;
  502 00000724         INITBOARD
  503 00000724 E92D401F        push{r0-r4,lr}
  504 00000728 E59F03B4        LDR              R0,=BOARD
  505 0000072C E3A0202A        LDR              R2,=42      ;LENGTH
  506 00000730 E3A03000        LDR              R3,=0
  507 00000734 E3A04101        ldr              R4,=0x40000000
  508 00000738         arrayloop
  509 00000738 E1530002        CMP              R3,R2
  510 0000073C 0A000003        BEQ              endarrayloop
  511 00000740 E7901103        LDR              R1,[R0,R3,LSL #2]
  512 00000744 E7841103        STR              R1,[R4,R3,LSL #2]
  513 00000748 E2833001        ADD              R3,#1
  514 0000074C EAFFFFF9        B                arrayloop
  515 00000750         endarrayloop
  516 00000750         
  517 00000750 E8BD801F        pop{r0-r4,pc}
  518 00000754         
  519 00000754         ;
  520 00000754         ; PLACE subroutine
  521 00000754         ; Puts board to the memory
  522 00000754         ; parameters:
  523 00000754         ; R8 = Which player just moved (Colour of tile) 
  524 00000754         ; return value:
  525 00000754         ; none
  526 00000754         ;
  527 00000754         PLACE
  528 00000754 E92D43FC        PUSH{r2-R9,      LR}
  529 00000758 E1A0500E        MOV              R5, LR
  530 0000075C E2400030        SUB              R0, #48     ;LENGTH
  531 00000760 E1A07000        MOV              R7, R0
  532 00000764 E59F4374        LDR              R4,=0x400000A4
  533 00000768 E3A09007        LDR              R9,=COLUMNNUM ; times 
  534 0000076C E0497007        SUB              R7, R9, R7
  535 00000770 E3A03004        ldr              r3,=4
  536 00000774 E0070793        mul              r7, r3, r7
  537 00000778 E0444007        sub              r4, r7
  538 0000077C         ROWCHECKINGLOOOOOP
  539 0000077C E5943000        LDR              R3, [R4]    ;
  540 00000780 E353004F        CMP              R3, #0x4F
  541 00000784 0A000004        BEQ              EMPTYSLOTFOUND
  542 00000788 E5943000        LDR              R3, [R4]
  543 0000078C E3530000        CMP              R3, #0
  544 00000790 0AFFFE35        BEQ              NOSPACEFOUND
  545 00000794 E244401C        SUB              R4, #28
  546 00000798 EAFFFFF7        B                ROWCHECKINGLOOOOOP
  547 0000079C         EMPTYSLOTFOUND
  548 0000079C E5848000        STR              R8,[R4]
  549 000007A0 E3580052        CMP              R8, #0x52
  550 000007A4 0A000000        BEQ              ROBOTSKIP



ARM Macro Assembler    Page 15 


  551 000007A8 EB000006        BL               checkIfWon
  552 000007AC         ROBOTSKIP
  553 000007AC E1A0E005        MOV              LR, R5
  554 000007B0 E8BD83FC        POP{r2-R9,       PC}
  555 000007B4         
  556 000007B4         
  557 000007B4         
  558 000007B4         ;
  559 000007B4         ; checkIfWon subroutine
  560 000007B4         ; Checks if the last move played was a winning move
  561 000007B4         ; parameters:
  562 000007B4         ; R8 = Which player just moved (Colour of tile) 
  563 000007B4         ; R4 = Position of the last move
  564 000007B4         ; R0 = Last move played (Distance from left)
  565 000007B4         ; R7 = Last move played (Distance from right)
  566 000007B4         ; return value:
  567 000007B4         ; none
  568 000007B4         ;
  569 000007B4         
  570 000007B4         GAMEPOSSIBLYWON
  571 000007B4 E3A0C001        LDR              R12,=1
  572 000007B8 E35A0052        CMP              R10, #0x52
  573 000007BC 1AFFFE5A        BNE              GAMEWON
  574 000007C0 E1A0A004        MOV              R10, R4
  575 000007C4 E8BD81FF        POP{R0-R8,       pc}
  576 000007C8         
  577 000007C8         checkIfWon
  578 000007C8 E92D41FF        PUSH{r0-r8,      lr}
  579 000007CC         ;horizontal checker
  580 000007CC E3A01001        LDR              R1,=1       ;Winning Counter
  581 000007D0 E1A03004        MOV              R3, R4      ;R3 = TempEditable 
                                                            address 
  582 000007D4         ;moving right
  583 000007D4         RUNRIGHTAGAIN
  584 000007D4 E3510004        CMP              R1,#4
  585 000007D8 2AFFFFF5        BHS              GAMEPOSSIBLYWON
  586 000007DC E1A07107        MOV              R7, R7, LSL #2
  587 000007E0 E0837007        ADD              R7, R3, R7
  588 000007E4 E2833004        ADD              R3,#4
  589 000007E8 E1530007        CMP              R3, R7
  590 000007EC AA000004        BGE              ENDOFRIGHT
  591 000007F0 E5935000        LDR              R5, [R3]
  592 000007F4 E1550008        CMP              R5, R8
  593 000007F8 1A000001        BNE              ENDOFRIGHT
  594 000007FC E2811001        ADD              R1,#1
  595 00000800 EAFFFFF3        B                RUNRIGHTAGAIN
  596 00000804         ENDOFRIGHT
  597 00000804         ;moving LEFT
  598 00000804 E1A03004        MOV              R3, R4
  599 00000808         RUNLEFTAGAIN
  600 00000808 E3510004        CMP              R1,#4
  601 0000080C 2AFFFFE8        BHS              GAMEPOSSIBLYWON
  602 00000810 E1A00100        MOV              R0, R0, LSL #2
  603 00000814 E0830000        ADD              R0, R3, R0
  604 00000818 E2433004        SUB              R3,#4
  605 0000081C E1530000        CMP              R3, R0
  606 00000820 AA000004        BGE              ENDOFLEFT
  607 00000824 E5935000        LDR              R5, [R3]
  608 00000828 E1550008        CMP              R5, R8



ARM Macro Assembler    Page 16 


  609 0000082C 1A000001        BNE              ENDOFLEFT
  610 00000830 E2811001        ADD              R1,#1
  611 00000834 EAFFFFF3        B                RUNLEFTAGAIN
  612 00000838         ENDOFLEFT
  613 00000838         ;VERTICAL checker
  614 00000838 E3A01001        LDR              R1,=1
  615 0000083C E59F329C        LDR              R3,=0x400000A4
  616 00000840 E1A06004        MOV              R6, R4
  617 00000844         GODOWNAGAIN
  618 00000844 E3510004        CMP              R1,#4
  619 00000848 2AFFFFD9        BHS              GAMEPOSSIBLYWON
  620 0000084C E286601C        ADD              R6,#28
  621 00000850 E1560003        CMP              R6, R3
  622 00000854 AA000004        BGE              ENDOFDOWN
  623 00000858 E5965000        LDR              R5, [R6]
  624 0000085C E1550008        CMP              R5, R8
  625 00000860 1A000001        BNE              ENDOFDOWN
  626 00000864 E2811001        ADD              R1,#1
  627 00000868 EAFFFFF5        B                GODOWNAGAIN
  628 0000086C         ENDOFDOWN
  629 0000086C         ;DIAGONAL CHECKER
  630 0000086C         ;DIAGONAL UP-RIGHT
  631 0000086C E3A01001        LDR              R1,=1
  632 00000870 E3A03101        LDR              R3,=0x40000000
  633 00000874 E1A06004        MOV              R6, R4
  634 00000878         GO_UP_RIGHT_AGAIN
  635 00000878 E3510004        CMP              R1,#4
  636 0000087C 2AFFFFCC        BHS              GAMEPOSSIBLYWON
  637 00000880 E246601C        SUB              R6,#28
  638 00000884 E1560003        CMP              R6, R3
  639 00000888 BA000005        BLT              ENDOF_UP_RIGHT
  640 0000088C E2866004        ADD              R6,#4
  641 00000890 E5965000        LDR              R5, [R6]
  642 00000894 E1550008        CMP              R5, R8
  643 00000898 1A000001        BNE              ENDOF_UP_RIGHT
  644 0000089C E2811001        ADD              R1,#1
  645 000008A0 EAFFFFF4        B                GO_UP_RIGHT_AGAIN
  646 000008A4         ENDOF_UP_RIGHT
  647 000008A4         ;DIAGONAL DOWN_LEFT
  648 000008A4 E1A06004        MOV              R6, R4
  649 000008A8 E59F3230        LDR              R3,=0x400000A4
  650 000008AC         GO_DOWN_LEFT_AGAIN
  651 000008AC E3510004        CMP              R1,#4
  652 000008B0 2AFFFFBF        BHS              GAMEPOSSIBLYWON
  653 000008B4 E286601C        ADD              R6,#28
  654 000008B8 E1560003        CMP              R6, R3
  655 000008BC CA000005        BGT              ENDOF_DOWN_LEFT
  656 000008C0 E2466004        SUB              R6,#4
  657 000008C4 E5965000        LDR              R5, [R6]
  658 000008C8 E1550008        CMP              R5, R8
  659 000008CC 1A000001        BNE              ENDOF_DOWN_LEFT
  660 000008D0 E2811001        ADD              R1,#1
  661 000008D4 EAFFFFF4        B                GO_DOWN_LEFT_AGAIN
  662 000008D8         ENDOF_DOWN_LEFT
  663 000008D8         
  664 000008D8         ;DIAGONAL UP-LEFT
  665 000008D8 E3A01001        LDR              R1,=1
  666 000008DC E3A03101        LDR              R3,=0x40000000
  667 000008E0 E1A06004        MOV              R6, R4



ARM Macro Assembler    Page 17 


  668 000008E4         GO_UP_LEFT_AGAIN
  669 000008E4 E3510004        CMP              R1,#4
  670 000008E8 2AFFFFB1        BHS              GAMEPOSSIBLYWON
  671 000008EC E246601C        SUB              R6,#28
  672 000008F0 E1560003        CMP              R6, R3
  673 000008F4 BA000005        BLT              ENDOF_UP_LEFT
  674 000008F8 E2466004        SUB              R6,#4
  675 000008FC E5965000        LDR              R5, [R6]
  676 00000900 E1550008        CMP              R5, R8
  677 00000904 1A000001        BNE              ENDOF_UP_LEFT
  678 00000908 E2811001        ADD              R1,#1
  679 0000090C EAFFFFF4        B                GO_UP_LEFT_AGAIN
  680 00000910         ENDOF_UP_LEFT
  681 00000910         ;DIAGONAL DOWN_RIGHT
  682 00000910 E1A06004        MOV              R6, R4
  683 00000914 E59F31C4        LDR              R3,=0x400000A4
  684 00000918         GO_DOWN_RIGHT_AGAIN
  685 00000918 E3510004        CMP              R1,#4
  686 0000091C 2AFFFFA4        BHS              GAMEPOSSIBLYWON
  687 00000920 E286601C        ADD              R6,#28
  688 00000924 E1560003        CMP              R6, R3
  689 00000928 CA000005        BGT              ENDOF_DOWN_RIGHT
  690 0000092C E2866004        ADD              R6,#4
  691 00000930 E5965000        LDR              R5, [R6]
  692 00000934 E1550008        CMP              R5, R8
  693 00000938 1A000001        BNE              ENDOF_DOWN_RIGHT
  694 0000093C E2811001        ADD              R1,#1
  695 00000940 EAFFFFF4        B                GO_DOWN_RIGHT_AGAIN
  696 00000944         ENDOF_DOWN_RIGHT
  697 00000944 E8BD81FF        POP{R0-R8,       pc}
  698 00000948         
  699 00000948         
  700 00000948         ;
  701 00000948         ; PRINTBOARD subroutine
  702 00000948         ; PRINTS board FROM the memory
  703 00000948         ; parameters:
  704 00000948         ; none
  705 00000948         ; return value:
  706 00000948         ; none
  707 00000948         ;
  708 00000948         PRINTBOARD
  709 00000948 E92D419F        push{r0-r4,      R8, R7, lr}
  710 0000094C E3A0202A        LDR              R2,=42      ;LENGTH
  711 00000950 E3A03000        LDR              R3,=0
  712 00000954 E3A08000        LDR              R8,=0
  713 00000958 E3A04101        ldr              R4,=0x40000000
  714 0000095C E1A0700E        MOV              R7, LR      ;
  715 00000960         PRINTarrayloop
  716 00000960 E3580007        CMP              R8, #COLUMNNUM
  717 00000964 0A000008        BEQ              ROWCHANGE
  718 00000968 E1530002        CMP              R3,R2
  719 0000096C 0A00000A        BEQ              PRINTendarrayloop
  720 00000970 E7940103        LDR              R0,[R4,R3,LSL #2]
  721 00000974 EB00002F        BL               put
  722 00000978 E3A00020        LDR              R0, =0x20
  723 0000097C EB00002D        BL               put
  724 00000980 E2833001        ADD              R3,#1
  725 00000984 E2888001        ADD              R8,#1
  726 00000988 EAFFFFF4        B                PRINTarrayloop



ARM Macro Assembler    Page 18 


  727 0000098C         ROWCHANGE
  728 0000098C E3A08000        LDR              R8,=0
  729 00000990 E3A0000A        LDR              R0, =10
  730 00000994 EB000027        BL               put
  731 00000998 EAFFFFF0        B                PRINTarrayloop
  732 0000099C         PRINTendarrayloop
  733 0000099C E1A0E007        MOV              LR, R7      ;
  734 000009A0 E8BD819F        pop{r0-r4,       R8, R7, pc}
  735 000009A4         
  736 000009A4         ;
  737 000009A4         ; isBoardFull subroutine
  738 000009A4         ; Checks if the board is full or not
  739 000009A4         ; parameters:
  740 000009A4         ; none
  741 000009A4         ; return value:
  742 000009A4         ; none
  743 000009A4         ;
  744 000009A4         isBoardFull
  745 000009A4 E92D401F        PUSH{R0-R4,      LR}
  746 000009A8 E3A04101        LDR              R4,=0x40000000
  747 000009AC E3A03007        LDR              R3,=COLUMNNUM
  748 000009B0 E3A02004        LDR              R2,=4
  749 000009B4 E3A0004F        LDR              R0,=79
  750 000009B8 E0020293        MUL              R2, R3, R2
  751 000009BC E0822004        ADD              R2, R2, R4
  752 000009C0         BOARDLOOOP
  753 000009C0 E1540002        CMP              R4,R2
  754 000009C4 2AFFFDE6        BHS              GAMEISDRAWED
  755 000009C8 E5941000        LDR              R1, [R4]
  756 000009CC E351004F        CMP              R1,#79
  757 000009D0 0A000001        BEQ              ENDOFBOARDCHECKER
  758 000009D4 E2844004        ADD              R4,#4
  759 000009D8 EAFFFFF8        B                BOARDLOOOP
  760 000009DC         ENDOFBOARDCHECKER
  761 000009DC E8BD801F        POP{R0-R4,       PC}
  762 000009E0         
  763 000009E0         ; 
  764 000009E0         ; PUTS
  765 000009E0         ;
  766 000009E0         ; sends NUL terminated ASCII string (address in R0) to U
                       ART #1 window
  767 000009E0         ;
  768 000009E0         PUTS
  769 000009E0 E92D4010        PUSH             {R4, LR}    ; push R4 and LR
  770 000009E4 E1A04000        MOV              R4, R0      ; copy R0
  771 000009E8         PUTS0
  772 000009E8 E4D40001        LDRB             R0, [R4], #1 ; get character + 
                                                            increment R4
  773 000009EC E3500000        CMP              R0, #0      ; 0?
  774 000009F0 0A000001        BEQ              PUTS1       ; return
  775 000009F4 EB00000F        BL               put         ; put character
  776 000009F8 EAFFFFFA        B                PUTS0       ; next character
  777 000009FC E8BD8010 
                       PUTS1   POP              {R4, PC}    ; pop R4 and PC
  778 00000A00         
  779 00000A00         
  780 00000A00         ;
  781 00000A00         ; inithw subroutines
  782 00000A00         ; performs hardware initialisation, including console



ARM Macro Assembler    Page 19 


  783 00000A00         ; parameters:
  784 00000A00         ; none
  785 00000A00         ; return value:
  786 00000A00         ; none
  787 00000A00         ;
  788 00000A00         inithw
  789 00000A00 E59F00E0        LDR              R0, =PINSEL0 ; enable UART0 TxD
                                                             and RxD signals
  790 00000A04 E3A01050        MOV              R1, #0x50
  791 00000A08 E5C01000        STRB             R1, [R0]
  792 00000A0C E59F00D8        LDR              R0, =U0LCR  ; 7 data bits + par
                                                            ity
  793 00000A10 E3A01002        LDR              R1, =0x02
  794 00000A14 E5C01000        STRB             R1, [R0]
  795 00000A18 E12FFF1E        BX               LR
  796 00000A1C         
  797 00000A1C         ;
  798 00000A1C         ; get subroutine
  799 00000A1C         ; returns the ASCII code of the next character read on t
                       he console
  800 00000A1C         ; parameters:
  801 00000A1C         ; none
  802 00000A1C         ; return value:
  803 00000A1C         ; R0 - ASCII code of the character read on teh console (
                       byte)
  804 00000A1C         ;
  805 00000A1C E59F10CC 
                       get     LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  806 00000A20         get0
  807 00000A20 E5910000        LDR              R0, [R1]    ; wait until
  808 00000A24         
  809 00000A24         
  810 00000A24 E2100001        ANDS             R0, #0x01   ; receiver data
  811 00000A28         
  812 00000A28 0AFFFFFC        BEQ              get0        ; ready
  813 00000A2C E59F10C0        LDR              R1, =U0RBR  ; R1 -> U0RBR (Rece
                                                            iver Buffer Registe
                                                            r)
  814 00000A30 E5D10000        LDRB             R0, [R1]    ; get received data
                                                            
  815 00000A34 E12FFF1E        BX               LR          ; return
  816 00000A38         
  817 00000A38         ;
  818 00000A38         ; put subroutine
  819 00000A38         ; writes a character to the console
  820 00000A38         ; parameters:
  821 00000A38         ; R0 - ASCII code of the character to write
  822 00000A38         ; return value:
  823 00000A38         ; none
  824 00000A38         ;
  825 00000A38         put
  826 00000A38 E59F10B0        LDR              R1, =U0LSR  ; R1 -> U0LSR (Line
                                                             Status Register)
  827 00000A3C E5D11000        LDRB             R1, [R1]    ; wait until transm
                                                            it
  828 00000A40 E2111020        ANDS             R1, R1, #0x20 
                                                            ; holding register
  829 00000A44 0AFFFFFB        BEQ              put         ; empty



ARM Macro Assembler    Page 20 


  830 00000A48 E59F10A4        LDR              R1, =U0THR  ; R1 -> U0THR
  831 00000A4C E5C10000        STRB             R0, [R1]    ; output charcter
  832 00000A50 E59F1098 
                       put0    LDR              R1, =U0LSR  ; R1 -> U0LSR
  833 00000A54 E5D11000        LDRB             R1, [R1]    ; wait until
  834 00000A58 E2111040        ANDS             R1, R1, #0x40 ; transmitter
  835 00000A5C 0AFFFFFB        BEQ              put0        ; empty (data flush
                                                            ed)
  836 00000A60 E12FFF1E        BX               LR          ; return
  837 00000A64         
  838 00000A64         ;
  839 00000A64         ; puts subroutine
  840 00000A64         ; writes the sequence of characters in a NULL-terminated
                        string to the console
  841 00000A64         ; parameters:
  842 00000A64         ; R0 - address of NULL-terminated ASCII string
  843 00000A64         ; return value:
  844 00000A64         ; R0 - ASCII code of the character read on teh console (
                       byte)
  845 00000A64         ;
  846 00000A64 E92D4010 
                       puts    STMFD            SP!, {R4, LR} ; push R4 and LR
  847 00000A68 E1A04000        MOV              R4, R0      ; copy R0
  848 00000A6C E4D40001 
                       puts0   LDRB             R0, [R4], #1 ; get character + 
                                                            increment R4
  849 00000A70 E3500000        CMP              R0, #0      ; 0?
  850 00000A74 0A000001        BEQ              puts1       ; return
  851 00000A78 EBFFFFEE        BL               put         ; put character
  852 00000A7C EAFFFFFA        B                puts0       ; next character
  853 00000A80 E8BD8010 
                       puts1   LDMFD            SP!, {R4, PC} ; pop R4 and PC
  854 00000A84         
  855 00000A84         
  856 00000A84                 END
              40001000 
              00000000 
              00000000 
              40000200 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              400000A4 



ARM Macro Assembler    Page 21 


              00000000 
              E002C000 
              E000C00C 
              E000C014 
              E000C000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\connect4.d -o.\objects\connect4.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5
\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --p
redefine="__UVISION_VERSION SETA 516" --list=.\listings\connect4.lst connect4.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

globals 00000000

Symbol: globals
   Definitions
      At line 18 in file connect4.s
   Uses
      None
Comment: globals unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ASKFORINPUT 00000289

Symbol: ASKFORINPUT
   Definitions
      At line 180 in file connect4.s
   Uses
      At line 79 in file connect4.s
      At line 88 in file connect4.s

BACKTOGAMEWON 00000134

Symbol: BACKTOGAMEWON
   Definitions
      At line 132 in file connect4.s
   Uses
      At line 146 in file connect4.s
Comment: BACKTOGAMEWON used once
BACKTOINPUT 000000D4

Symbol: BACKTOINPUT
   Definitions
      At line 101 in file connect4.s
   Uses
      At line 72 in file connect4.s
      At line 81 in file connect4.s
      At line 90 in file connect4.s
      At line 164 in file connect4.s

BOARD 000003AC

Symbol: BOARD
   Definitions
      At line 191 in file connect4.s
   Uses
      At line 504 in file connect4.s
Comment: BOARD used once
BOARDLOOOP 000009C0

Symbol: BOARDLOOOP
   Definitions
      At line 752 in file connect4.s
   Uses
      At line 759 in file connect4.s
Comment: BOARDLOOOP used once
CHECKROBOSPOTVALUE 00000544

Symbol: CHECKROBOSPOTVALUE
   Definitions
      At line 314 in file connect4.s
   Uses
      At line 239 in file connect4.s
Comment: CHECKROBOSPOTVALUE used once
DRAW 0000023F

Symbol: DRAW
   Definitions
      At line 179 in file connect4.s
   Uses
      At line 154 in file connect4.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: DRAW used once
EMPTYSLOTFOUND 0000079C

Symbol: EMPTYSLOTFOUND
   Definitions
      At line 547 in file connect4.s
   Uses
      At line 541 in file connect4.s
Comment: EMPTYSLOTFOUND used once
ENDOFBOARDCHECKER 000009DC

Symbol: ENDOFBOARDCHECKER
   Definitions
      At line 760 in file connect4.s
   Uses
      At line 757 in file connect4.s
Comment: ENDOFBOARDCHECKER used once
ENDOFCOLUMNCHECKER 000004C8

Symbol: ENDOFCOLUMNCHECKER
   Definitions
      At line 247 in file connect4.s
   Uses
      At line 231 in file connect4.s
Comment: ENDOFCOLUMNCHECKER used once
ENDOFDOWN 0000086C

Symbol: ENDOFDOWN
   Definitions
      At line 628 in file connect4.s
   Uses
      At line 622 in file connect4.s
      At line 625 in file connect4.s

ENDOFLEFT 00000838

Symbol: ENDOFLEFT
   Definitions
      At line 612 in file connect4.s
   Uses
      At line 606 in file connect4.s
      At line 609 in file connect4.s

ENDOFRIGHT 00000804

Symbol: ENDOFRIGHT
   Definitions
      At line 596 in file connect4.s
   Uses
      At line 590 in file connect4.s
      At line 593 in file connect4.s

ENDOF_DOWN_LEFT 000008D8

Symbol: ENDOF_DOWN_LEFT
   Definitions
      At line 662 in file connect4.s
   Uses
      At line 655 in file connect4.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 659 in file connect4.s

ENDOF_DOWN_RIGHT 00000944

Symbol: ENDOF_DOWN_RIGHT
   Definitions
      At line 696 in file connect4.s
   Uses
      At line 689 in file connect4.s
      At line 693 in file connect4.s

ENDOF_UP_LEFT 00000910

Symbol: ENDOF_UP_LEFT
   Definitions
      At line 680 in file connect4.s
   Uses
      At line 673 in file connect4.s
      At line 677 in file connect4.s

ENDOF_UP_RIGHT 000008A4

Symbol: ENDOF_UP_RIGHT
   Definitions
      At line 646 in file connect4.s
   Uses
      At line 639 in file connect4.s
      At line 643 in file connect4.s

FIND_FREE_SLOT 00000528

Symbol: FIND_FREE_SLOT
   Definitions
      At line 294 in file connect4.s
   Uses
      At line 234 in file connect4.s
Comment: FIND_FREE_SLOT used once
FOUNDEMPTYSLOT 000004A8

Symbol: FOUNDEMPTYSLOT
   Definitions
      At line 237 in file connect4.s
   Uses
      At line 300 in file connect4.s
Comment: FOUNDEMPTYSLOT used once
FULLCOLUMN 000002C2

Symbol: FULLCOLUMN
   Definitions
      At line 181 in file connect4.s
   Uses
      At line 70 in file connect4.s
Comment: FULLCOLUMN used once
GAMEISDRAWED 00000164

Symbol: GAMEISDRAWED
   Definitions
      At line 148 in file connect4.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 754 in file connect4.s
Comment: GAMEISDRAWED used once
GAMEPOSSIBLYWON 000007B4

Symbol: GAMEPOSSIBLYWON
   Definitions
      At line 570 in file connect4.s
   Uses
      At line 585 in file connect4.s
      At line 601 in file connect4.s
      At line 619 in file connect4.s
      At line 636 in file connect4.s
      At line 652 in file connect4.s
      At line 670 in file connect4.s
      At line 686 in file connect4.s

GAMEWON 0000012C

Symbol: GAMEWON
   Definitions
      At line 129 in file connect4.s
   Uses
      At line 325 in file connect4.s
      At line 339 in file connect4.s
      At line 357 in file connect4.s
      At line 379 in file connect4.s
      At line 398 in file connect4.s
      At line 418 in file connect4.s
      At line 437 in file connect4.s
      At line 573 in file connect4.s

GETS 000006DC

Symbol: GETS
   Definitions
      At line 471 in file connect4.s
   Uses
      At line 43 in file connect4.s
      At line 105 in file connect4.s

GETSEND 00000714

Symbol: GETSEND
   Definitions
      At line 488 in file connect4.s
   Uses
      At line 481 in file connect4.s
Comment: GETSEND used once
GODOWNAGAIN 00000844

Symbol: GODOWNAGAIN
   Definitions
      At line 617 in file connect4.s
   Uses
      At line 627 in file connect4.s
Comment: GODOWNAGAIN used once
GO_DOWN_LEFT_AGAIN 000008AC

Symbol: GO_DOWN_LEFT_AGAIN



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 650 in file connect4.s
   Uses
      At line 661 in file connect4.s
Comment: GO_DOWN_LEFT_AGAIN used once
GO_DOWN_RIGHT_AGAIN 00000918

Symbol: GO_DOWN_RIGHT_AGAIN
   Definitions
      At line 684 in file connect4.s
   Uses
      At line 695 in file connect4.s
Comment: GO_DOWN_RIGHT_AGAIN used once
GO_UP_LEFT_AGAIN 000008E4

Symbol: GO_UP_LEFT_AGAIN
   Definitions
      At line 668 in file connect4.s
   Uses
      At line 679 in file connect4.s
Comment: GO_UP_LEFT_AGAIN used once
GO_UP_RIGHT_AGAIN 00000878

Symbol: GO_UP_RIGHT_AGAIN
   Definitions
      At line 634 in file connect4.s
   Uses
      At line 645 in file connect4.s
Comment: GO_UP_RIGHT_AGAIN used once
INITBOARD 00000724

Symbol: INITBOARD
   Definitions
      At line 502 in file connect4.s
   Uses
      At line 35 in file connect4.s
Comment: INITBOARD used once
INPUTCHOICEAGAIN 0000001C

Symbol: INPUTCHOICEAGAIN
   Definitions
      At line 40 in file connect4.s
   Uses
      At line 50 in file connect4.s
Comment: INPUTCHOICEAGAIN used once
INPUTNOTVALID 00000184

Symbol: INPUTNOTVALID
   Definitions
      At line 158 in file connect4.s
   Uses
      At line 110 in file connect4.s
      At line 112 in file connect4.s

INVALIDINPUT 00000353

Symbol: INVALIDINPUT
   Definitions
      At line 186 in file connect4.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 161 in file connect4.s
Comment: INVALIDINPUT used once
INVALIDSTARTINGCHOICE 0000019C

Symbol: INVALIDSTARTINGCHOICE
   Definitions
      At line 177 in file connect4.s
   Uses
      At line 48 in file connect4.s
Comment: INVALIDSTARTINGCHOICE used once
ISNTHIGHER 000006D8

Symbol: ISNTHIGHER
   Definitions
      At line 457 in file connect4.s
   Uses
      At line 454 in file connect4.s
Comment: ISNTHIGHER used once
LOOP1 000006F4

Symbol: LOOP1
   Definitions
      At line 478 in file connect4.s
   Uses
      At line 487 in file connect4.s
Comment: LOOP1 used once
NEXTTILE 000004E8

Symbol: NEXTTILE
   Definitions
      At line 269 in file connect4.s
   Uses
      At line 283 in file connect4.s
Comment: NEXTTILE used once
NOHUMANWINFOUND 00000520

Symbol: NOHUMANWINFOUND
   Definitions
      At line 286 in file connect4.s
   Uses
      At line 280 in file connect4.s
Comment: NOHUMANWINFOUND used once
NORMALMODE 00000058

Symbol: NORMALMODE
   Definitions
      At line 59 in file connect4.s
   Uses
      At line 47 in file connect4.s
Comment: NORMALMODE used once
NOSPACEFOUND 0000006C

Symbol: NOSPACEFOUND
   Definitions
      At line 67 in file connect4.s
   Uses
      At line 544 in file connect4.s
Comment: NOSPACEFOUND used once



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

PLACE 00000754

Symbol: PLACE
   Definitions
      At line 527 in file connect4.s
   Uses
      At line 113 in file connect4.s
Comment: PLACE used once
PLAYERONESGO 0000030B

Symbol: PLAYERONESGO
   Definitions
      At line 183 in file connect4.s
   Uses
      At line 77 in file connect4.s
Comment: PLAYERONESGO used once
PLAYERONESTURN 00000080

Symbol: PLAYERONESTURN
   Definitions
      At line 74 in file connect4.s
   Uses
      At line 57 in file connect4.s
      At line 64 in file connect4.s
      At line 99 in file connect4.s
      At line 118 in file connect4.s
      At line 120 in file connect4.s

PLAYERTWOSGO 00000323

Symbol: PLAYERTWOSGO
   Definitions
      At line 184 in file connect4.s
   Uses
      At line 86 in file connect4.s
Comment: PLAYERTWOSGO used once
PLAYERTWOSTURN 0000009C

Symbol: PLAYERTWOSTURN
   Definitions
      At line 83 in file connect4.s
   Uses
      At line 127 in file connect4.s
Comment: PLAYERTWOSTURN used once
PLAYERWINFOUND 0000051C

Symbol: PLAYERWINFOUND
   Definitions
      At line 284 in file connect4.s
   Uses
      At line 278 in file connect4.s
Comment: PLAYERWINFOUND used once
PRINTBOARD 00000948

Symbol: PRINTBOARD
   Definitions
      At line 708 in file connect4.s
   Uses
      At line 56 in file connect4.s



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

      At line 63 in file connect4.s
      At line 98 in file connect4.s
      At line 116 in file connect4.s
      At line 135 in file connect4.s
      At line 151 in file connect4.s

PRINTarrayloop 00000960

Symbol: PRINTarrayloop
   Definitions
      At line 715 in file connect4.s
   Uses
      At line 726 in file connect4.s
      At line 731 in file connect4.s

PRINTendarrayloop 0000099C

Symbol: PRINTendarrayloop
   Definitions
      At line 732 in file connect4.s
   Uses
      At line 719 in file connect4.s
Comment: PRINTendarrayloop used once
PUTS 000009E0

Symbol: PUTS
   Definitions
      At line 768 in file connect4.s
   Uses
      At line 37 in file connect4.s
      At line 39 in file connect4.s
      At line 49 in file connect4.s
      At line 55 in file connect4.s
      At line 62 in file connect4.s
      At line 69 in file connect4.s
      At line 71 in file connect4.s
      At line 78 in file connect4.s
      At line 80 in file connect4.s
      At line 87 in file connect4.s
      At line 89 in file connect4.s
      At line 96 in file connect4.s
      At line 115 in file connect4.s
      At line 134 in file connect4.s
      At line 137 in file connect4.s
      At line 141 in file connect4.s
      At line 150 in file connect4.s
      At line 153 in file connect4.s
      At line 155 in file connect4.s
      At line 160 in file connect4.s
      At line 162 in file connect4.s

PUTS0 000009E8

Symbol: PUTS0
   Definitions
      At line 771 in file connect4.s
   Uses
      At line 776 in file connect4.s
Comment: PUTS0 used once



ARM Macro Assembler    Page 9 Alphabetic symbol ordering
Relocatable symbols

PUTS1 000009FC

Symbol: PUTS1
   Definitions
      At line 777 in file connect4.s
   Uses
      At line 774 in file connect4.s
Comment: PUTS1 used once
RESET 00000000

Symbol: RESET
   Definitions
      At line 20 in file connect4.s
   Uses
      None
Comment: RESET unused
RESTART 00000000

Symbol: RESTART
   Definitions
      At line 22 in file connect4.s
   Uses
      At line 108 in file connect4.s
Comment: RESTART used once
ROBOTCHOICE 000001F2

Symbol: ROBOTCHOICE
   Definitions
      At line 178 in file connect4.s
   Uses
      At line 38 in file connect4.s
Comment: ROBOTCHOICE used once
ROBOTORNOT 0000011C

Symbol: ROBOTORNOT
   Definitions
      At line 123 in file connect4.s
   Uses
      At line 121 in file connect4.s
Comment: ROBOTORNOT used once
ROBOTPLAYERWINCHECKER 000004D8

Symbol: ROBOTPLAYERWINCHECKER
   Definitions
      At line 264 in file connect4.s
   Uses
      None
Comment: ROBOTPLAYERWINCHECKER unused
ROBOTSETUP 00000044

Symbol: ROBOTSETUP
   Definitions
      At line 52 in file connect4.s
   Uses
      At line 45 in file connect4.s
Comment: ROBOTSETUP used once
ROBOTSGO 0000033B

Symbol: ROBOTSGO



ARM Macro Assembler    Page 10 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 185 in file connect4.s
   Uses
      At line 95 in file connect4.s
Comment: ROBOTSGO used once
ROBOTSKIP 000007AC

Symbol: ROBOTSKIP
   Definitions
      At line 552 in file connect4.s
   Uses
      At line 550 in file connect4.s
Comment: ROBOTSKIP used once
ROBOTSTURN 000000B8

Symbol: ROBOTSTURN
   Definitions
      At line 92 in file connect4.s
   Uses
      At line 125 in file connect4.s
Comment: ROBOTSTURN used once
ROBOTWIN 0000015C

Symbol: ROBOTWIN
   Definitions
      At line 144 in file connect4.s
   Uses
      At line 131 in file connect4.s
Comment: ROBOTWIN used once
ROWCHANGE 0000098C

Symbol: ROWCHANGE
   Definitions
      At line 727 in file connect4.s
   Uses
      At line 717 in file connect4.s
Comment: ROWCHANGE used once
ROWCHECKINGLOOOOOP 0000077C

Symbol: ROWCHECKINGLOOOOOP
   Definitions
      At line 538 in file connect4.s
   Uses
      At line 546 in file connect4.s
Comment: ROWCHECKINGLOOOOOP used once
ROWCHECKLOOP 00000528

Symbol: ROWCHECKLOOP
   Definitions
      At line 295 in file connect4.s
   Uses
      At line 302 in file connect4.s
Comment: ROWCHECKLOOP used once
ROWISFULL 000004C0

Symbol: ROWISFULL
   Definitions
      At line 244 in file connect4.s
   Uses



ARM Macro Assembler    Page 11 Alphabetic symbol ordering
Relocatable symbols

      At line 241 in file connect4.s
      At line 297 in file connect4.s

RUNLEFTAGAIN 00000808

Symbol: RUNLEFTAGAIN
   Definitions
      At line 599 in file connect4.s
   Uses
      At line 611 in file connect4.s
Comment: RUNLEFTAGAIN used once
RUNRIGHTAGAIN 000007D4

Symbol: RUNRIGHTAGAIN
   Definitions
      At line 583 in file connect4.s
   Uses
      At line 595 in file connect4.s
Comment: RUNRIGHTAGAIN used once
SET_NEW_SPOTSCORE 000006C4

Symbol: SET_NEW_SPOTSCORE
   Definitions
      At line 451 in file connect4.s
   Uses
      At line 323 in file connect4.s
      At line 337 in file connect4.s
      At line 355 in file connect4.s
      At line 377 in file connect4.s
      At line 396 in file connect4.s
      At line 416 in file connect4.s
      At line 435 in file connect4.s

SKIPTILE 00000514

Symbol: SKIPTILE
   Definitions
      At line 281 in file connect4.s
   Uses
      At line 274 in file connect4.s
Comment: SKIPTILE used once
arrayloop 00000738

Symbol: arrayloop
   Definitions
      At line 508 in file connect4.s
   Uses
      At line 514 in file connect4.s
Comment: arrayloop used once
cENDOFDOWN 000005D8

Symbol: cENDOFDOWN
   Definitions
      At line 366 in file connect4.s
   Uses
      At line 360 in file connect4.s
      At line 363 in file connect4.s

cENDOFLEFT 000005A0



ARM Macro Assembler    Page 12 Alphabetic symbol ordering
Relocatable symbols


Symbol: cENDOFLEFT
   Definitions
      At line 347 in file connect4.s
   Uses
      At line 344 in file connect4.s
Comment: cENDOFLEFT used once
cENDOFRIGHT 00000578

Symbol: cENDOFRIGHT
   Definitions
      At line 333 in file connect4.s
   Uses
      At line 330 in file connect4.s
Comment: cENDOFRIGHT used once
cENDOF_DOWN_LEFT 0000064C

Symbol: cENDOF_DOWN_LEFT
   Definitions
      At line 408 in file connect4.s
   Uses
      At line 401 in file connect4.s
      At line 405 in file connect4.s

cENDOF_DOWN_RIGHT 000006C0

Symbol: cENDOF_DOWN_RIGHT
   Definitions
      At line 447 in file connect4.s
   Uses
      At line 440 in file connect4.s
      At line 444 in file connect4.s

cENDOF_UP_LEFT 00000688

Symbol: cENDOF_UP_LEFT
   Definitions
      At line 428 in file connect4.s
   Uses
      At line 421 in file connect4.s
      At line 425 in file connect4.s

cENDOF_UP_RIGHT 00000614

Symbol: cENDOF_UP_RIGHT
   Definitions
      At line 389 in file connect4.s
   Uses
      At line 382 in file connect4.s
      At line 386 in file connect4.s

cGODOWNAGAIN 000005AC

Symbol: cGODOWNAGAIN
   Definitions
      At line 354 in file connect4.s
   Uses
      At line 365 in file connect4.s
Comment: cGODOWNAGAIN used once



ARM Macro Assembler    Page 13 Alphabetic symbol ordering
Relocatable symbols

cGO_DOWN_LEFT_AGAIN 0000061C

Symbol: cGO_DOWN_LEFT_AGAIN
   Definitions
      At line 395 in file connect4.s
   Uses
      At line 407 in file connect4.s
Comment: cGO_DOWN_LEFT_AGAIN used once
cGO_DOWN_RIGHT_AGAIN 00000690

Symbol: cGO_DOWN_RIGHT_AGAIN
   Definitions
      At line 434 in file connect4.s
   Uses
      At line 446 in file connect4.s
Comment: cGO_DOWN_RIGHT_AGAIN used once
cGO_UP_LEFT_AGAIN 00000658

Symbol: cGO_UP_LEFT_AGAIN
   Definitions
      At line 415 in file connect4.s
   Uses
      At line 427 in file connect4.s
Comment: cGO_UP_LEFT_AGAIN used once
cGO_UP_RIGHT_AGAIN 000005E4

Symbol: cGO_UP_RIGHT_AGAIN
   Definitions
      At line 376 in file connect4.s
   Uses
      At line 388 in file connect4.s
Comment: cGO_UP_RIGHT_AGAIN used once
cRUNLEFTAGAIN 0000057C

Symbol: cRUNLEFTAGAIN
   Definitions
      At line 336 in file connect4.s
   Uses
      At line 346 in file connect4.s
Comment: cRUNLEFTAGAIN used once
cRUNRIGHTAGAIN 00000554

Symbol: cRUNRIGHTAGAIN
   Definitions
      At line 322 in file connect4.s
   Uses
      At line 332 in file connect4.s
Comment: cRUNRIGHTAGAIN used once
checkIfWon 000007C8

Symbol: checkIfWon
   Definitions
      At line 577 in file connect4.s
   Uses
      At line 276 in file connect4.s
      At line 551 in file connect4.s

endarrayloop 00000750




ARM Macro Assembler    Page 14 Alphabetic symbol ordering
Relocatable symbols

Symbol: endarrayloop
   Definitions
      At line 515 in file connect4.s
   Uses
      At line 510 in file connect4.s
Comment: endarrayloop used once
get 00000A1C

Symbol: get
   Definitions
      At line 805 in file connect4.s
   Uses
      At line 483 in file connect4.s
Comment: get used once
get0 00000A20

Symbol: get0
   Definitions
      At line 806 in file connect4.s
   Uses
      At line 812 in file connect4.s
Comment: get0 used once
inithw 00000A00

Symbol: inithw
   Definitions
      At line 788 in file connect4.s
   Uses
      At line 30 in file connect4.s
Comment: inithw used once
isBoardFull 000009A4

Symbol: isBoardFull
   Definitions
      At line 744 in file connect4.s
   Uses
      At line 75 in file connect4.s
      At line 84 in file connect4.s
      At line 93 in file connect4.s

nextrowcheck 00000494

Symbol: nextrowcheck
   Definitions
      At line 229 in file connect4.s
   Uses
      At line 246 in file connect4.s
Comment: nextrowcheck used once
put 00000A38

Symbol: put
   Definitions
      At line 825 in file connect4.s
   Uses
      At line 139 in file connect4.s
      At line 486 in file connect4.s
      At line 721 in file connect4.s
      At line 723 in file connect4.s
      At line 730 in file connect4.s



ARM Macro Assembler    Page 15 Alphabetic symbol ordering
Relocatable symbols

      At line 775 in file connect4.s
      At line 829 in file connect4.s
      At line 851 in file connect4.s

put0 00000A50

Symbol: put0
   Definitions
      At line 832 in file connect4.s
   Uses
      At line 835 in file connect4.s
Comment: put0 used once
puts 00000A64

Symbol: puts
   Definitions
      At line 846 in file connect4.s
   Uses
      None
Comment: puts unused
puts0 00000A6C

Symbol: puts0
   Definitions
      At line 848 in file connect4.s
   Uses
      At line 852 in file connect4.s
Comment: puts0 used once
puts1 00000A80

Symbol: puts1
   Definitions
      At line 853 in file connect4.s
   Uses
      At line 850 in file connect4.s
Comment: puts1 used once
robotColumnChecker 00000454

Symbol: robotColumnChecker
   Definitions
      At line 212 in file connect4.s
   Uses
      At line 97 in file connect4.s
Comment: robotColumnChecker used once
stop 00000198

Symbol: stop
   Definitions
      At line 169 in file connect4.s
   Uses
      At line 142 in file connect4.s
      At line 156 in file connect4.s
      At line 169 in file connect4.s

str_go 0000038F

Symbol: str_go
   Definitions
      At line 187 in file connect4.s



ARM Macro Assembler    Page 16 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 36 in file connect4.s
      At line 54 in file connect4.s
      At line 61 in file connect4.s

str_newline 000003A9

Symbol: str_newline
   Definitions
      At line 188 in file connect4.s
   Uses
      At line 68 in file connect4.s
      At line 114 in file connect4.s
      At line 133 in file connect4.s
      At line 136 in file connect4.s
      At line 149 in file connect4.s
      At line 152 in file connect4.s
      At line 159 in file connect4.s

win 00000303

Symbol: win
   Definitions
      At line 182 in file connect4.s
   Uses
      At line 140 in file connect4.s
Comment: win used once
103 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

COLUMNNUM 00000007

Symbol: COLUMNNUM
   Definitions
      At line 8 in file connect4.s
   Uses
      At line 216 in file connect4.s
      At line 224 in file connect4.s
      At line 533 in file connect4.s
      At line 716 in file connect4.s
      At line 747 in file connect4.s

PINSEL0 E002C000

Symbol: PINSEL0
   Definitions
      At line 11 in file connect4.s
   Uses
      At line 789 in file connect4.s
Comment: PINSEL0 used once
ROWNUM 00000006

Symbol: ROWNUM
   Definitions
      At line 7 in file connect4.s
   Uses
      At line 217 in file connect4.s
Comment: ROWNUM used once
U0LCR E000C00C

Symbol: U0LCR
   Definitions
      At line 14 in file connect4.s
   Uses
      At line 792 in file connect4.s
Comment: U0LCR used once
U0LSR E000C014

Symbol: U0LSR
   Definitions
      At line 15 in file connect4.s
   Uses
      At line 805 in file connect4.s
      At line 826 in file connect4.s
      At line 832 in file connect4.s

U0RBR E000C000

Symbol: U0RBR
   Definitions
      At line 12 in file connect4.s
   Uses
      At line 813 in file connect4.s
Comment: U0RBR used once
U0THR E000C000

Symbol: U0THR
   Definitions
      At line 13 in file connect4.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 830 in file connect4.s
Comment: U0THR used once
7 symbols
445 symbols in table
